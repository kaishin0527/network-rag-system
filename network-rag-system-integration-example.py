
#!/usr/bin/env python3
"""
Network RAG System + OpenHands Integration Example
ネットワークRAGシステムとOpenHandsを連携させる実装例
"""

import sys
import os
sys.path.append('/workspace/network-rag-system')

from src.rag_system import NetworkRAGSystem
from src.config_generator import NetworkConfigGenerator
from dataclasses import dataclass
from typing import Dict, List, Optional, Any
import json
from datetime import datetime

@dataclass
class OpenHandsIntegrationConfig:
    """OpenHands連携設定"""
    llm_api_url: str = "http://localhost:8000"
    llm_api_key: str = "your-api-key"
    rag_system_url: str = "http://localhost:8002"
    max_retries: int = 3
    timeout: int = 30
    enable_validation: bool = True

class OpenHandsNetworkAgent:
    """OpenHandsネットワークエージェント"""
    
    def __init__(self, config: OpenHandsIntegrationConfig):
        self.config = config
        self.rag_system = NetworkRAGSystem()
        self.config_generator = NetworkConfigGenerator()
        self.query_history = []
        
    def process_network_request(self, query: str, device_name: str = None, config_type: str = None) -> Dict[str, Any]:
        """ネットワークリクエストの処理"""
        print(f"Processing network request: {query}")
        print(f"Device: {device_name}, Config Type: {config_type}")
        
        try:
            # 1. RAGシステムで関連情報を検索
            relevant_info = self.rag_system.retrieve_relevant_info(query)
            print(f"Found relevant devices: {relevant_info['relevant_devices']}")
            print(f"Found relevant policies: {relevant_info['relevant_policies']}")
            print(f"Found relevant templates: {relevant_info['relevant_templates']}")
            
            # 2. プロンプトを生成
            prompt = self.rag_system.generate_config_prompt(query)
            print(f"Generated prompt length: {len(prompt)}")
            
            # 3. LLM APIでコンフィグを生成（実際のAPI呼び出し）
            config_content = self._call_llm_api(prompt)
            print(f"Generated config length: {len(config_content)}")
            
            # 4. コンフィグの検証
            validation_result = None
            if self.config.enable_validation:
                validation_result = self.config_generator._validate_config(config_content)
                print(f"Validation result: {validation_result['is_valid']}")
            
            # 5. 結果の整形
            result = {
                'query': query,
                'device_name': device_name or self._extract_device_name(query),
                'config_type': config_type or self._extract_config_type(query),
                'config_content': config_content,
                'validation_result': validation_result,
                'relevant_info': relevant_info,
                'timestamp': datetime.now().isoformat(),
                'status': 'success'
            }
            
            # 6. クエリ履歴に追加
            self.query_history.append(result)
            
            return result
            
        except Exception as e:
            print(f"Error processing request: {str(e)}")
            return {
                'query': query,
                'error': str(e),
                'timestamp': datetime.now().isoformat(),
                'status': 'error'
            }
    
    def _call_llm_api(self, prompt: str) -> str:
        """LLM APIの呼び出し（ダミー実装）"""
        # 実際にはここでLLM APIを呼び出す
        # 今回はダミーのコンフィグを返す
        
        device_name = self._extract_device_name(prompt)
        config_type = self._extract_config_type(prompt)
        
        # ダミーコンフィグの生成
        dummy_config = self._generate_dummy_config(device_name, config_type, prompt)
        
        return dummy_config
    
    def _generate_dummy_config(self, device_name: str, config_type: str, prompt: str) -> str:
        """ダミーコンフィグの生成"""
        config_lines = [
            f"! {device_name} - Configuration Generated by OpenHands",
            f"! Generated at: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}",
            f"! Query: {prompt}",
            "",
            "! Basic Settings",
            f"hostname {device_name}",
            "ip routing",
            "service timestamps debug datetime msec",
            "service timestamps log datetime msec",
            "no ip domain-lookup",
            "ip domain-name company.local",
            ""
        ]
        
        # 設定タイプに応じたコンフィグを追加
        if config_type in ['ospf', 'general']:
            config_lines.extend([
                "! OSPF Configuration",
                "router ospf 1",
                " router-id 10.1.1.1",
                " network 10.1.0.0 0.0.255.255 area 0",
                " network 192.168.100.0 0.0.0.3 area 0",
                " passive-interface default",
                " no passive-interface GigabitEthernet0/0",
                ""
            ])
        
        if config_type in ['security', 'general']:
            config_lines.extend([
                "! Security Configuration",
                "snmp-server community public_ro RO",
                "snmp-server community private_rw RW",
                "ip access-list extended INBOUND",
                " permit tcp any any",
                " permit udp any any",
                " deny   ip any any",
                ""
            ])
        
        if config_type in ['interface', 'general']:
            config_lines.extend([
                "! Interface Configuration",
                "interface Loopback0",
                " ip address 10.1.1.1 255.255.255.255",
                "interface GigabitEthernet0/0",
                " ip address 192.168.100.1 255.255.255.252",
                " no shutdown",
                "interface GigabitEthernet0/1",
                " ip address 192.168.200.1 255.255.255.252",
                " no shutdown",
                ""
            ])
        
        if config_type in ['monitoring', 'general']:
            config_lines.extend([
                "! Monitoring Configuration",
                "logging host 192.168.100.100",
                "ntp server 192.168.100.100",
                "clock summer-time CEST recurring",
                ""
            ])
        
        # クエリに基づいた追加設定
        if '支社' in prompt or 'branch' in prompt.lower():
            config_lines.extend([
                "! Branch Office Specific Configuration",
                "interface GigabitEthernet0/0/0",
                " ip address 10.0.0.1 255.255.255.252",
                " no shutdown",
                ""
            ])
        
        if 'vlan' in prompt.lower():
            config_lines.extend([
                "! VLAN Configuration",
                "vlan 40",
                " name Development",
                "interface Vlan40",
                " ip address 192.168.40.1 255.255.255.0",
                " no shutdown",
                ""
            ])
        
        return '\n'.join(config_lines)
    
    def _extract_device_name(self, text: str) -> str:
        """デバイス名の抽出"""
        import re
        device_pattern = r'(?:R1|R2|SW1|router|switch)'
        match = re.search(device_pattern, text, re.IGNORECASE)
        return match.group(0).upper() if match else "R1"
    
    def _extract_config_type(self, text: str) -> str:
        """設定タイプの抽出"""
        import re
        config_patterns = {
            'ospf': r'ospf|ルーティング',
            'interface': r'interface|インターフェース',
            'security': r'security|セキュリティ|acl',
            'ha': r'ha|高可用性|hsrp',
            'monitoring': r'monitoring|監視'
        }
        
        for config_type, pattern in config_patterns.items():
            if re.search(pattern, text, re.IGNORECASE):
                return config_type
        
        return 'general'
    
    def batch_process_requests(self, requests: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """バッチ処理の実行"""
        print(f"Processing {len(requests)} requests in batch...")
        results = []
        
        for i, request in enumerate(requests, 1):
            print(f"Processing request {i}/{len(requests)}: {request['query']}")
            
            result = self.process_network_request(
                query=request['query'],
                device_name=request.get('device_name'),
                config_type=request.get('config_type')
            )
            
            results.append(result)
            
            # レートリミットのための待機
            import time
            time.sleep(0.5)
        
        return results
    
    def generate_report(self, results: List[Dict[str, Any]]) -> str:
        """処理結果のレポート生成"""
        report_lines = [
            "# Network Configuration Generation Report",
            f"Generated at: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}",
            f"Total requests: {len(results)}",
            ""
        ]
        
        # サマリー統計
        success_count = sum(1 for r in results if r.get('status') == 'success')
        error_count = len(results) - success_count
        
        report_lines.extend([
            "## Summary",
            f"- Successful: {success_count}",
            f"- Failed: {error_count}",
            f"- Success rate: {success_count/len(results)*100:.1f}%",
            ""
        ])
        
        # 詳細結果
        report_lines.append("## Detailed Results")
        for i, result in enumerate(results, 1):
            status_icon = "✓" if result.get('status') == 'success' else "✗"
            device_name = result.get('device_name', 'unknown')
            config_type = result.get('config_type', 'unknown')
            
            report_lines.append(f"{i}. {status_icon} {result.get('query', 'Unknown query')}")
            report_lines.append(f"   Device: {device_name}, Type: {config_type}")
            
            if result.get('status') == 'success':
                validation_status = result.get('validation_result', {}).get('is_valid', False)
                validation_icon = "✓" if validation_status else "⚠"
                report_lines.append(f"   Validation: {validation_icon}")
                
                if result.get('relevant_info'):
                    devices = result['relevant_info'].get('relevant_devices', [])
                    if devices:
                        report_lines.append(f"   Relevant devices: {', '.join(devices)}")
            else:
                report_lines.append(f"   Error: {result.get('error', 'Unknown error')}")
            
            report_lines.append("")
        
        return '\n'.join(report_lines)
    
    def save_results(self, results: List[Dict[str, Any]], output_dir: str = "/tmp/network_configs"):
        """結果の保存"""
        import os
        os.makedirs(output_dir, exist_ok=True)
        
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        
        # 各結果を個別ファイルに保存
        for i, result in enumerate(results):
            if result.get('status') == 'success':
                # コンフィグファイル
                config_filename = f"config_{i+1}_{result.get('device_name', 'unknown')}_{timestamp}.txt"
                config_filepath = os.path.join(output_dir, config_filename)
                
                with open(config_filepath, 'w', encoding='utf-8') as f:
                    f.write(f"! Network Configuration\n")
                    f.write(f"! Device: {result.get('device_name', 'unknown')}\n")
                    f.write(f"! Type: {result.get('config_type', 'unknown')}\n")
                    f.write(f"! Generated: {result.get('timestamp', '')}\n")
                    f.write(f"! Query: {result.get('query', '')}\n")
                    f.write("\n")
                    f.write(result.get('config_content', ''))
                
                # 検証結果ファイル
                if result.get('validation_result'):
                    validation_filename = f"validation_{i+1}_{result.get('device_name', 'unknown')}_{timestamp}.json"
                    validation_filepath = os.path.join(output_dir, validation_filename)
                    
                    with open(validation_filepath, 'w', encoding='utf-8') as f:
                        json.dump({
                            'device_name': result.get('device_name'),
                            'config_type': result.get('config_type'),
                            'validation_result': result.get('validation_result'),
                            'timestamp': result.get('timestamp')
                        }, f, indent=2, ensure_ascii=False)
        
        # 全体のレポートファイル
        report_filename = f"report_{timestamp}.md"
        report_filepath = os.path.join(output_dir, report_filename)
        
        report_content = self.generate_report(results)
        with open(report_filepath, 'w', encoding='utf-8') as f:
            f.write(report_content)
        
        return output_dir

def main():
    """メイン関数 - 実行例"""
    print("=== Network RAG System + OpenHands Integration Example ===\n")
    
    # 設定の初期化
    config = OpenHandsIntegrationConfig(
        llm_api_url="http://localhost:8000",
        llm_api_key="demo-api-key",
        enable_validation=True
    )
    
    # エージェントの初期化
    agent = OpenHandsNetworkAgent(config)
    
    # テストクエリ
    test_queries = [
        {
            'query': 'R1に新しい支社Cの接続を追加してOSPFで設定してください',
            'device_name': 'R1',
            'config_type': 'ospf'
        },
        {
            'query': 'SW1にVLAN40を追加して開発部用に設定してください',
            'device_name': 'SW1',
            'config_type': 'interface'
        },
        {
            'query': 'R2のセキュリティを強化してACLを追加してください',
            'device_name': 'R2',
            'config_type': 'security'
        },
        {
            'query': '両方のルータに監視設定を追加してください',
            'device_name': 'R1',
            'config_type': 'monitoring'
        }
    ]
    
    # バッチ処理の実行
    print("Starting batch processing...")
    results = agent.batch_process_requests(test_queries)
    
    # 結果の表示
    print("\n" + "="*70)
    print("RESULTS SUMMARY")
    print("="*70)
    
    for i, result in enumerate(results, 1):
        print(f"\n--- Result {i} ---")
        print(f"Query: {result.get('query', 'Unknown')}")
        print(f"Device: {result.get('device_name', 'Unknown')}")
        print(f"Type: {result.get('config_type', 'Unknown')}")
        print(f"Status: {result.get('status', 'Unknown')}")
        
        if result.get('status') == 'success':
            print(f"Validation: {'PASS' if result.get('validation_result', {}).get('is_valid') else 'FAIL'}")
            
            # 生成されたコンフィグのプレビュー
            config_content = result.get('config_content', '')
            config_lines = config_content.split('\n')
            print(f"Config preview ({len(config_lines)} lines):")
            for line in config_lines[:10]:  # 最初の10行のみ表示
                print(f"  {line}")
            if len(config_lines) > 10:
                print(f"  ... and {len(config_lines) - 10} more lines")
        else:
            print(f"Error: {result.get('error', 'Unknown error')}")
    
    # 結果の保存
    print("\n" + "="*70)
    print("SAVING RESULTS")
    print("="*70)
    
    output_dir = agent.save_results(results)
    print(f"Results saved to: {output_dir}")
    
    # レポートの表示
    print("\n" + "="*70)
    print("GENERATED REPORT")
    print("="*70)
    
    report = agent.generate_report(results)
    print(report)
    
    print("\n=== Integration Example Completed ===")

if __name__ == "__main__":
    main()
